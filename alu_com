`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date:    21:20:37 10/09/2018 
// Design Name: 
// Module Name:    Alu 
// Project Name: 
// Target Devices: 
// Tool versions: 
// Description: 
//
// Dependencies: 
//
// Revision: 
// Revision 0.01 - File Created
// Additional Comments: 
//
//////////////////////////////////////////////////////////////////////////////////
module ArithmeticLogicUnit(
    alu_control,	//specifies the alu operation
    operand0, 	//first operand
    operand1, 	//second operand
    ALUResult, 	//alu result
	 carryflag, //carryflag
	 signflag,  //signflag
	 overflowflag,	//overflow flag (underflow as well)
    zflag //zero flag
);

   parameter size=32,aluCSize=3;
   input [aluCSize-1:0] alu_control;
	input [size-1:0] operand0; 
	input [size-1:0] operand1;
	
   output  [size-1:0] ALUResult;
	output 	carryflag;
	output  signflag;	
	output  overflowflag;
 	output  zflag;


		assign  zflag = 0;
		assign overflowflag 	= 0;
		assign carryflag = 0;
		assign signflag = 0;
		assign ALUResult = 0;

		if (alu_control == 3'b000)// Signed add
				begin
					assign {carryflag,ALUResult} = operand0 + operand1;
					if ((operand0 >= 0 && operand1 >= 0 && ALUResult < 0) ||
						(operand0 < 0 && operand1 < 0 && ALUResult >= 0)) 
						begin
							assign overflowflag = 1;
						end 
					else 
						begin
							assign overflowflag = 0;
						end						
					assign zflag = (ALUResult == 0) ? 1 : 0;		
				end
				
			else if (alu_control ==3'b001) // Comp
				begin
					assign {carryflag,ALUResult} = ~operand1 + 1;
					assign overflowflag = 0;
					assign zflag = (ALUResult == 0) ? 1 : 0;
					assign carryflag = 0;
				end				

			else if (alu_control == 3'b010 ) // AND
				begin
					assign ALUResult = operand0 & operand1;
					assign overflowflag = 0;
					assign carryflag = 0;
					assign zflag = (ALUResult == 0) ? 1 : 0;
				end	
	

			else if (alu_control == 3'b011) // XOR
				begin
					assign ALUResult = operand0 ^ operand1;
					assign overflowflag = 0;
					assign carryflag = 0;
					assign zflag = (ALUResult == 0) ? 1 : 0;
				end

			else if (alu_control == 3'b100) // shift left
				begin
					assign ALUResult = operand0 << operand1;
					assign overflowflag = 0;
					assign carryflag = 0;
					assign zflag = (ALUResult == 0) ? 1 : 0;
				end
			else if (alu_control == 3'b101) // shift right
				begin	
					assign ALUResult = operand0 >> operand1;
					assign overflowflag 	= 0;
					assign carryflag = 0;
					assign zflag = (ALUResult == 0) ? 1 : 0;
				end
		   else if (alu_control == 3'b110) // shift right arithmetic
				begin
					assign ALUResult = operand0 >>> operand1;
					assign overflowflag = 0;
					assign carryflag = 0;
					assign zflag = (ALUResult == 0) ? 1 : 0;
				end

			else
				begin
					assign zflag = 0;
					assign overflowflag 	= 0;
					assign carryflag = 0;
					assign signflag = 0;
					assign ALUResult = 0;
				end				

		//if ((operand0<0 && operand0>operand1)||(operand1<0 && operand1>operand0))
		if (ALUResult[31] | overflowflag)
			assign signflag = 1;
		else
			assign signflag = 0;

		/*$strobe("%t: ALU  FLAGS ALUop:  %b", $time,alu_control);
		$strobe("%t: operand0:%b operand1:%b", $time,operand0,operand1);
		$strobe("%t: ALUResult:%b ", $time,ALUResult);
		$strobe("%t: zflag  %b overflowflag %b ", $time, zflag, overflowflag);
		$strobe("%t: signflag  %b carryflag %b ", $time, signflag, carryflag);*/

 endmodule
